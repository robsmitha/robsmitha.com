// <auto-generated />
using System;
using Elysian.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Elysian.Migrations
{
    [DbContext(typeof(ElysianContext))]
    partial class ElysianContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Elysian.Domain.Data.Budget", b =>
                {
                    b.Property<int>("BudgetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BudgetId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BudgetId");

                    b.ToTable("Budget", (string)null);
                });

            modelBuilder.Entity("Elysian.Domain.Data.BudgetAccessItem", b =>
                {
                    b.Property<int>("BudgetAccessItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BudgetAccessItemId"));

                    b.Property<int>("BudgetId")
                        .HasColumnType("int");

                    b.Property<int>("InstitutionAccessItemId")
                        .HasColumnType("int");

                    b.HasKey("BudgetAccessItemId");

                    b.HasIndex("BudgetId");

                    b.HasIndex("InstitutionAccessItemId");

                    b.ToTable("BudgetAccessItem", (string)null);
                });

            modelBuilder.Entity("Elysian.Domain.Data.BudgetCategory", b =>
                {
                    b.Property<int>("BudgetCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BudgetCategoryId"));

                    b.Property<int>("BudgetId")
                        .HasColumnType("int");

                    b.Property<decimal>("Estimate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FinancialCategoryId")
                        .HasColumnType("int");

                    b.HasKey("BudgetCategoryId");

                    b.HasIndex("BudgetId");

                    b.HasIndex("FinancialCategoryId");

                    b.ToTable("BudgetCategory", (string)null);
                });

            modelBuilder.Entity("Elysian.Domain.Data.BudgetExcludedTransaction", b =>
                {
                    b.Property<int>("BudgetExcludedTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BudgetExcludedTransactionId"));

                    b.Property<int>("BudgetId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BudgetExcludedTransactionId");

                    b.HasIndex("BudgetId");

                    b.ToTable("BudgetExcludedTransaction", (string)null);
                });

            modelBuilder.Entity("Elysian.Domain.Data.FinancialCategory", b =>
                {
                    b.Property<int>("FinancialCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FinancialCategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FinancialCategoryId");

                    b.ToTable("FinancialCategory", (string)null);
                });

            modelBuilder.Entity("Elysian.Domain.Data.InstitutionAccessItem", b =>
                {
                    b.Property<int>("InstitutionAccessItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstitutionAccessItemId"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstitutionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InstitutionAccessItemId");

                    b.HasIndex("InstitutionId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("AK_InstitutionAccessItem_InstitutionId_UserId");

                    b.ToTable("InstitutionAccessItem", (string)null);
                });

            modelBuilder.Entity("Elysian.Domain.Data.OAuthState", b =>
                {
                    b.Property<int>("OAuthStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OAuthStateId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OAuthProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OAuthStateId");

                    b.ToTable("OAuthState", (string)null);
                });

            modelBuilder.Entity("Elysian.Domain.Data.OAuthToken", b =>
                {
                    b.Property<int>("OAuthTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OAuthTokenId"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OAuthProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OAuthTokenId");

                    b.HasIndex("OAuthProvider", "UserId")
                        .IsUnique()
                        .HasDatabaseName("AK_OAuthProvider_UserId");

                    b.ToTable("OAuthToken", (string)null);
                });

            modelBuilder.Entity("Elysian.Domain.Data.TransactionCategory", b =>
                {
                    b.Property<int>("TransactionCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionCategoryId"));

                    b.Property<int>("BudgetId")
                        .HasColumnType("int");

                    b.Property<int>("FinancialCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TransactionCategoryId");

                    b.HasIndex("BudgetId");

                    b.HasIndex("FinancialCategoryId");

                    b.ToTable("TransactionCategory", (string)null);
                });

            modelBuilder.Entity("Elysian.Domain.Data.BudgetAccessItem", b =>
                {
                    b.HasOne("Elysian.Domain.Data.Budget", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elysian.Domain.Data.InstitutionAccessItem", "InstitutionAccessItem")
                        .WithMany()
                        .HasForeignKey("InstitutionAccessItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Budget");

                    b.Navigation("InstitutionAccessItem");
                });

            modelBuilder.Entity("Elysian.Domain.Data.BudgetCategory", b =>
                {
                    b.HasOne("Elysian.Domain.Data.Budget", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elysian.Domain.Data.FinancialCategory", "FinancialCategory")
                        .WithMany()
                        .HasForeignKey("FinancialCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Budget");

                    b.Navigation("FinancialCategory");
                });

            modelBuilder.Entity("Elysian.Domain.Data.BudgetExcludedTransaction", b =>
                {
                    b.HasOne("Elysian.Domain.Data.Budget", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Budget");
                });

            modelBuilder.Entity("Elysian.Domain.Data.TransactionCategory", b =>
                {
                    b.HasOne("Elysian.Domain.Data.Budget", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elysian.Domain.Data.FinancialCategory", "FinancialCategory")
                        .WithMany()
                        .HasForeignKey("FinancialCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Budget");

                    b.Navigation("FinancialCategory");
                });
#pragma warning restore 612, 618
        }
    }
}

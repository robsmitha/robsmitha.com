/* eslint-disable prefer-const */
/* eslint-disable no-var */
/* eslint-disable no-prototype-builtins */

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.0.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------







export class Pagination implements IPagination {
    count!: number;

    [key: string]: any;

    constructor(data?: IPagination) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): Pagination {
        data = typeof data === 'object' ? data : {};
        let result = new Pagination();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["count"] = this.count;
        return data;
    }
}

export interface IPagination {
    count: number;

    [key: string]: any;
}

export class Request implements IRequest {
    billNumber!: string;
    billType!: string;
    billUrl!: string;
    congress!: string;
    contentType!: string;
    format!: string;

    [key: string]: any;

    constructor(data?: IRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.billNumber = _data["billNumber"];
            this.billType = _data["billType"];
            this.billUrl = _data["billUrl"];
            this.congress = _data["congress"];
            this.contentType = _data["contentType"];
            this.format = _data["format"];
        }
    }

    static fromJS(data: any): Request {
        data = typeof data === 'object' ? data : {};
        let result = new Request();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["billNumber"] = this.billNumber;
        data["billType"] = this.billType;
        data["billUrl"] = this.billUrl;
        data["congress"] = this.congress;
        data["contentType"] = this.contentType;
        data["format"] = this.format;
        return data;
    }
}

export interface IRequest {
    billNumber: string;
    billType: string;
    billUrl: string;
    congress: string;
    contentType: string;
    format: string;

    [key: string]: any;
}

export class Title implements ITitle {
    title!: string;
    titleType!: string;
    titleTypeCode!: number;
    billTextVersionCode!: string;
    billTextVersionName!: string;
    chamberCode!: string;
    chamberName!: string;

    [key: string]: any;

    constructor(data?: ITitle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.title = _data["title"];
            this.titleType = _data["titleType"];
            this.titleTypeCode = _data["titleTypeCode"];
            this.billTextVersionCode = _data["billTextVersionCode"];
            this.billTextVersionName = _data["billTextVersionName"];
            this.chamberCode = _data["chamberCode"];
            this.chamberName = _data["chamberName"];
        }
    }

    static fromJS(data: any): Title {
        data = typeof data === 'object' ? data : {};
        let result = new Title();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["title"] = this.title;
        data["titleType"] = this.titleType;
        data["titleTypeCode"] = this.titleTypeCode;
        data["billTextVersionCode"] = this.billTextVersionCode;
        data["billTextVersionName"] = this.billTextVersionName;
        data["chamberCode"] = this.chamberCode;
        data["chamberName"] = this.chamberName;
        return data;
    }
}

export interface ITitle {
    title: string;
    titleType: string;
    titleTypeCode: number;
    billTextVersionCode: string;
    billTextVersionName: string;
    chamberCode: string;
    chamberName: string;

    [key: string]: any;
}

export class BillTitlesResponse implements IBillTitlesResponse {
    pagination!: Pagination;
    request!: Request;
    titles!: Title[];

    [key: string]: any;

    constructor(data?: IBillTitlesResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.pagination = _data["pagination"] ? Pagination.fromJS(_data["pagination"]) : <any>undefined;
            this.request = _data["request"] ? Request.fromJS(_data["request"]) : <any>undefined;
            if (Array.isArray(_data["titles"])) {
                this.titles = [] as any;
                for (let item of _data["titles"])
                    this.titles!.push(Title.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BillTitlesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BillTitlesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["pagination"] = this.pagination ? this.pagination.toJSON() : <any>undefined;
        data["request"] = this.request ? this.request.toJSON() : <any>undefined;
        if (Array.isArray(this.titles)) {
            data["titles"] = [];
            for (let item of this.titles)
                data["titles"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBillTitlesResponse {
    pagination: Pagination;
    request: Request;
    titles: Title[];

    [key: string]: any;
}

/* eslint-disable prefer-const */
/* eslint-disable no-var */
/* eslint-disable no-prototype-builtins */

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.0.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------







export class RecordedVote implements IRecordedVote {
    chamber!: string;
    congress!: number;
    date!: Date;
    rollNumber!: number;
    sessionNumber!: number;
    url!: string;

    [key: string]: any;

    constructor(data?: IRecordedVote) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.chamber = _data["chamber"];
            this.congress = _data["congress"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.rollNumber = _data["rollNumber"];
            this.sessionNumber = _data["sessionNumber"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): RecordedVote {
        data = typeof data === 'object' ? data : {};
        let result = new RecordedVote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["chamber"] = this.chamber;
        data["congress"] = this.congress;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["rollNumber"] = this.rollNumber;
        data["sessionNumber"] = this.sessionNumber;
        data["url"] = this.url;
        return data;
    }
}

export interface IRecordedVote {
    chamber: string;
    congress: number;
    date: Date;
    rollNumber: number;
    sessionNumber: number;
    url: string;

    [key: string]: any;
}

export class SourceSystem implements ISourceSystem {
    code!: number;
    name!: string;

    [key: string]: any;

    constructor(data?: ISourceSystem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.code = _data["code"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): SourceSystem {
        data = typeof data === 'object' ? data : {};
        let result = new SourceSystem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["code"] = this.code;
        data["name"] = this.name;
        return data;
    }
}

export interface ISourceSystem {
    code: number;
    name: string;

    [key: string]: any;
}

export class Action implements IAction {
    actionCode!: string;
    actionDate!: Date;
    recordedVotes!: RecordedVote[];
    sourceSystem!: SourceSystem;
    text!: string;
    type!: string;

    [key: string]: any;

    constructor(data?: IAction) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.actionCode = _data["actionCode"];
            this.actionDate = _data["actionDate"] ? new Date(_data["actionDate"].toString()) : <any>undefined;
            if (Array.isArray(_data["recordedVotes"])) {
                this.recordedVotes = [] as any;
                for (let item of _data["recordedVotes"])
                    this.recordedVotes!.push(RecordedVote.fromJS(item));
            }
            this.sourceSystem = _data["sourceSystem"] ? SourceSystem.fromJS(_data["sourceSystem"]) : <any>undefined;
            this.text = _data["text"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): Action {
        data = typeof data === 'object' ? data : {};
        let result = new Action();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["actionCode"] = this.actionCode;
        data["actionDate"] = this.actionDate ? formatDate(this.actionDate) : <any>undefined;
        if (Array.isArray(this.recordedVotes)) {
            data["recordedVotes"] = [];
            for (let item of this.recordedVotes)
                data["recordedVotes"].push(item.toJSON());
        }
        data["sourceSystem"] = this.sourceSystem ? this.sourceSystem.toJSON() : <any>undefined;
        data["text"] = this.text;
        data["type"] = this.type;
        return data;
    }
}

export interface IAction {
    actionCode: string;
    actionDate: Date;
    recordedVotes: RecordedVote[];
    sourceSystem: SourceSystem;
    text: string;
    type: string;

    [key: string]: any;
}

export class Pagination implements IPagination {
    count!: number;
    next!: string;

    [key: string]: any;

    constructor(data?: IPagination) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.count = _data["count"];
            this.next = _data["next"];
        }
    }

    static fromJS(data: any): Pagination {
        data = typeof data === 'object' ? data : {};
        let result = new Pagination();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["count"] = this.count;
        data["next"] = this.next;
        return data;
    }
}

export interface IPagination {
    count: number;
    next: string;

    [key: string]: any;
}

export class Request implements IRequest {
    billNumber!: string;
    billType!: string;
    billUrl!: string;
    congress!: string;
    contentType!: string;
    format!: string;

    [key: string]: any;

    constructor(data?: IRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.billNumber = _data["billNumber"];
            this.billType = _data["billType"];
            this.billUrl = _data["billUrl"];
            this.congress = _data["congress"];
            this.contentType = _data["contentType"];
            this.format = _data["format"];
        }
    }

    static fromJS(data: any): Request {
        data = typeof data === 'object' ? data : {};
        let result = new Request();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["billNumber"] = this.billNumber;
        data["billType"] = this.billType;
        data["billUrl"] = this.billUrl;
        data["congress"] = this.congress;
        data["contentType"] = this.contentType;
        data["format"] = this.format;
        return data;
    }
}

export interface IRequest {
    billNumber: string;
    billType: string;
    billUrl: string;
    congress: string;
    contentType: string;
    format: string;

    [key: string]: any;
}

export class BillActionsResponse implements IBillActionsResponse {
    actions!: Action[];
    pagination!: Pagination;
    request!: Request;

    [key: string]: any;

    constructor(data?: IBillActionsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["actions"])) {
                this.actions = [] as any;
                for (let item of _data["actions"])
                    this.actions!.push(Action.fromJS(item));
            }
            this.pagination = _data["pagination"] ? Pagination.fromJS(_data["pagination"]) : <any>undefined;
            this.request = _data["request"] ? Request.fromJS(_data["request"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BillActionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BillActionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.actions)) {
            data["actions"] = [];
            for (let item of this.actions)
                data["actions"].push(item.toJSON());
        }
        data["pagination"] = this.pagination ? this.pagination.toJSON() : <any>undefined;
        data["request"] = this.request ? this.request.toJSON() : <any>undefined;
        return data;
    }
}

export interface IBillActionsResponse {
    actions: Action[];
    pagination: Pagination;
    request: Request;

    [key: string]: any;
}

function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

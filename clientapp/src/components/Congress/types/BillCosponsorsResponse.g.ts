/* eslint-disable prefer-const */
/* eslint-disable no-var */
/* eslint-disable no-prototype-builtins */

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.0.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------







export class Cosponsor implements ICosponsor {
    bioguideId!: string;
    district!: number;
    firstName!: string;
    fullName!: string;
    isOriginalCosponsor!: boolean;
    lastName!: string;
    middleName!: string;
    party!: string;
    sponsorshipDate!: Date;
    state!: string;
    url!: string;

    [key: string]: any;

    constructor(data?: ICosponsor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.bioguideId = _data["bioguideId"];
            this.district = _data["district"];
            this.firstName = _data["firstName"];
            this.fullName = _data["fullName"];
            this.isOriginalCosponsor = _data["isOriginalCosponsor"];
            this.lastName = _data["lastName"];
            this.middleName = _data["middleName"];
            this.party = _data["party"];
            this.sponsorshipDate = _data["sponsorshipDate"] ? new Date(_data["sponsorshipDate"].toString()) : <any>undefined;
            this.state = _data["state"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): Cosponsor {
        data = typeof data === 'object' ? data : {};
        let result = new Cosponsor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["bioguideId"] = this.bioguideId;
        data["district"] = this.district;
        data["firstName"] = this.firstName;
        data["fullName"] = this.fullName;
        data["isOriginalCosponsor"] = this.isOriginalCosponsor;
        data["lastName"] = this.lastName;
        data["middleName"] = this.middleName;
        data["party"] = this.party;
        data["sponsorshipDate"] = this.sponsorshipDate ? formatDate(this.sponsorshipDate) : <any>undefined;
        data["state"] = this.state;
        data["url"] = this.url;
        return data;
    }
}

export interface ICosponsor {
    bioguideId: string;
    district: number;
    firstName: string;
    fullName: string;
    isOriginalCosponsor: boolean;
    lastName: string;
    middleName: string;
    party: string;
    sponsorshipDate: Date;
    state: string;
    url: string;

    [key: string]: any;
}

export class Pagination implements IPagination {
    count!: number;
    countIncludingWithdrawnCosponsors!: number;
    next!: string;

    [key: string]: any;

    constructor(data?: IPagination) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.count = _data["count"];
            this.countIncludingWithdrawnCosponsors = _data["countIncludingWithdrawnCosponsors"];
            this.next = _data["next"];
        }
    }

    static fromJS(data: any): Pagination {
        data = typeof data === 'object' ? data : {};
        let result = new Pagination();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["count"] = this.count;
        data["countIncludingWithdrawnCosponsors"] = this.countIncludingWithdrawnCosponsors;
        data["next"] = this.next;
        return data;
    }
}

export interface IPagination {
    count: number;
    countIncludingWithdrawnCosponsors: number;
    next: string;

    [key: string]: any;
}

export class Request implements IRequest {
    billNumber!: string;
    billType!: string;
    billUrl!: string;
    congress!: string;
    contentType!: string;
    format!: string;

    [key: string]: any;

    constructor(data?: IRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.billNumber = _data["billNumber"];
            this.billType = _data["billType"];
            this.billUrl = _data["billUrl"];
            this.congress = _data["congress"];
            this.contentType = _data["contentType"];
            this.format = _data["format"];
        }
    }

    static fromJS(data: any): Request {
        data = typeof data === 'object' ? data : {};
        let result = new Request();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["billNumber"] = this.billNumber;
        data["billType"] = this.billType;
        data["billUrl"] = this.billUrl;
        data["congress"] = this.congress;
        data["contentType"] = this.contentType;
        data["format"] = this.format;
        return data;
    }
}

export interface IRequest {
    billNumber: string;
    billType: string;
    billUrl: string;
    congress: string;
    contentType: string;
    format: string;

    [key: string]: any;
}

export class BillCosponsorsResponse implements IBillCosponsorsResponse {
    cosponsors!: Cosponsor[];
    pagination!: Pagination;
    request!: Request;

    [key: string]: any;

    constructor(data?: IBillCosponsorsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["cosponsors"])) {
                this.cosponsors = [] as any;
                for (let item of _data["cosponsors"])
                    this.cosponsors!.push(Cosponsor.fromJS(item));
            }
            this.pagination = _data["pagination"] ? Pagination.fromJS(_data["pagination"]) : <any>undefined;
            this.request = _data["request"] ? Request.fromJS(_data["request"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BillCosponsorsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BillCosponsorsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.cosponsors)) {
            data["cosponsors"] = [];
            for (let item of this.cosponsors)
                data["cosponsors"].push(item.toJSON());
        }
        data["pagination"] = this.pagination ? this.pagination.toJSON() : <any>undefined;
        data["request"] = this.request ? this.request.toJSON() : <any>undefined;
        return data;
    }
}

export interface IBillCosponsorsResponse {
    cosponsors: Cosponsor[];
    pagination: Pagination;
    request: Request;

    [key: string]: any;
}

function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

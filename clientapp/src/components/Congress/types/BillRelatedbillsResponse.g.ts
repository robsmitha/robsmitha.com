/* eslint-disable prefer-const */
/* eslint-disable no-var */
/* eslint-disable no-prototype-builtins */

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.0.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------







export class Pagination implements IPagination {
    count!: number;

    [key: string]: any;

    constructor(data?: IPagination) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): Pagination {
        data = typeof data === 'object' ? data : {};
        let result = new Pagination();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["count"] = this.count;
        return data;
    }
}

export interface IPagination {
    count: number;

    [key: string]: any;
}

export class LatestAction implements ILatestAction {
    actionDate!: Date;
    actionTime!: string;
    text!: string;

    [key: string]: any;

    constructor(data?: ILatestAction) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.actionDate = _data["actionDate"] ? new Date(_data["actionDate"].toString()) : <any>undefined;
            this.actionTime = _data["actionTime"];
            this.text = _data["text"];
        }
    }

    static fromJS(data: any): LatestAction {
        data = typeof data === 'object' ? data : {};
        let result = new LatestAction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["actionDate"] = this.actionDate ? formatDate(this.actionDate) : <any>undefined;
        data["actionTime"] = this.actionTime;
        data["text"] = this.text;
        return data;
    }
}

export interface ILatestAction {
    actionDate: Date;
    actionTime: string;
    text: string;

    [key: string]: any;
}

export class RelationshipDetail implements IRelationshipDetail {
    identifiedBy!: string;
    type!: string;

    [key: string]: any;

    constructor(data?: IRelationshipDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.identifiedBy = _data["identifiedBy"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): RelationshipDetail {
        data = typeof data === 'object' ? data : {};
        let result = new RelationshipDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["identifiedBy"] = this.identifiedBy;
        data["type"] = this.type;
        return data;
    }
}

export interface IRelationshipDetail {
    identifiedBy: string;
    type: string;

    [key: string]: any;
}

export class RelatedBill implements IRelatedBill {
    congress!: number;
    latestAction!: LatestAction;
    number!: number;
    relationshipDetails!: RelationshipDetail[];
    title!: string;
    type!: string;
    url!: string;

    [key: string]: any;

    constructor(data?: IRelatedBill) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.congress = _data["congress"];
            this.latestAction = _data["latestAction"] ? LatestAction.fromJS(_data["latestAction"]) : <any>undefined;
            this.number = _data["number"];
            if (Array.isArray(_data["relationshipDetails"])) {
                this.relationshipDetails = [] as any;
                for (let item of _data["relationshipDetails"])
                    this.relationshipDetails!.push(RelationshipDetail.fromJS(item));
            }
            this.title = _data["title"];
            this.type = _data["type"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): RelatedBill {
        data = typeof data === 'object' ? data : {};
        let result = new RelatedBill();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["congress"] = this.congress;
        data["latestAction"] = this.latestAction ? this.latestAction.toJSON() : <any>undefined;
        data["number"] = this.number;
        if (Array.isArray(this.relationshipDetails)) {
            data["relationshipDetails"] = [];
            for (let item of this.relationshipDetails)
                data["relationshipDetails"].push(item.toJSON());
        }
        data["title"] = this.title;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    }
}

export interface IRelatedBill {
    congress: number;
    latestAction: LatestAction;
    number: number;
    relationshipDetails: RelationshipDetail[];
    title: string;
    type: string;
    url: string;

    [key: string]: any;
}

export class Request implements IRequest {
    billNumber!: string;
    billType!: string;
    billUrl!: string;
    congress!: string;
    contentType!: string;
    format!: string;

    [key: string]: any;

    constructor(data?: IRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.billNumber = _data["billNumber"];
            this.billType = _data["billType"];
            this.billUrl = _data["billUrl"];
            this.congress = _data["congress"];
            this.contentType = _data["contentType"];
            this.format = _data["format"];
        }
    }

    static fromJS(data: any): Request {
        data = typeof data === 'object' ? data : {};
        let result = new Request();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["billNumber"] = this.billNumber;
        data["billType"] = this.billType;
        data["billUrl"] = this.billUrl;
        data["congress"] = this.congress;
        data["contentType"] = this.contentType;
        data["format"] = this.format;
        return data;
    }
}

export interface IRequest {
    billNumber: string;
    billType: string;
    billUrl: string;
    congress: string;
    contentType: string;
    format: string;

    [key: string]: any;
}

export class BillRelatedbillsResponse implements IBillRelatedbillsResponse {
    pagination!: Pagination;
    relatedBills!: RelatedBill[];
    request!: Request;

    [key: string]: any;

    constructor(data?: IBillRelatedbillsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.pagination = _data["pagination"] ? Pagination.fromJS(_data["pagination"]) : <any>undefined;
            if (Array.isArray(_data["relatedBills"])) {
                this.relatedBills = [] as any;
                for (let item of _data["relatedBills"])
                    this.relatedBills!.push(RelatedBill.fromJS(item));
            }
            this.request = _data["request"] ? Request.fromJS(_data["request"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BillRelatedbillsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BillRelatedbillsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["pagination"] = this.pagination ? this.pagination.toJSON() : <any>undefined;
        if (Array.isArray(this.relatedBills)) {
            data["relatedBills"] = [];
            for (let item of this.relatedBills)
                data["relatedBills"].push(item.toJSON());
        }
        data["request"] = this.request ? this.request.toJSON() : <any>undefined;
        return data;
    }
}

export interface IBillRelatedbillsResponse {
    pagination: Pagination;
    relatedBills: RelatedBill[];
    request: Request;

    [key: string]: any;
}

function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}
